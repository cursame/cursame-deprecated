/**
 * @class Command.module.Application
 * @author Jacky Nguyen <jacky@sencha.com>
 */
Ext.define("Command.module.Application",{extend:"Command.module.Abstract",description:"Resolve application dependencies and build for production",actions:{create:["(Alias to 'sencha generate app') Generate a new project with the recommended structure",["name","n","The namespace of the application to create. This will be used as the prefix for all your classes","string",null,"MyApp"],["path","p","The directory path to generate this application to.","string",null,"/path/to/myapp"],["library","l","The library's build to develop your application with, either 'core' or 'all'. Defaults to 'core'","string","core","all"]],resolve:["Generate a list of dependencies in the exact loading order for the given application. Note that the resolved paths are relative to the given application's HTML document",["uri","u","The URI to the application's HTML document","string",null,"http://localhost/myapp/index.html"],["output","o","The file path to write the results to in JSON format.","string",null,"dependencies.json"]],build:["Build the application at the current working directory to the given path",["environment","e","The build environment, either 'testing', 'package', 'production', or 'native'\n                          + 'testing' is meant for QA prior to production. All JavaScript and CSS Files are bundled, but not minified\n                          + 'package' creates a self-contained, re-distributable production build that \n                             normally runs from local file system without the need for a web server\n                          + 'production' creates a production build that is normally hosted on a web server and \n                             serve multiple clients (devices). The build is offline-capable and has built-in \n                             OTA delta updating feature\n                          + 'native' first generates a 'package' build, then packages it as a native \n                             application, ready to be deployed to native platforms","string",null,"production"],["destination","d","The directory path to build this application to. \n                          If none given, the default path specified inside 'app.json' is used","string","","/path/to/deploy/myapp"],["archive","a","The directory path where all previous builds were stored,\n                          needed to generate deltas between updates (for production only). \n                          If none given, the default path specified inside 'app.json' is used","string","","/path/to/myapp/archive"]]},create:function(){var a=this.getModule("generate");a.app.apply(a,arguments)},resolve:function(a,b,c){var d=require("url").parse(a);/^file|http/.test(d.protocol)||(a="file:///"+require("path").resolve(a).replace(/\\/g,"/")),this.exec("%s %s %s",[this.getVendorPath("phantomjs/"+this.cli.platformName+"/phantomjs"),this.getVendorPath("phantomjs/dependencies.js"),a],function(a,d){a?this.error(d):(b&&this.getModule("fs").write(b,d),c&&c(JSON.parse(d)))})},build:function(a,b,c){var d=!1;a=="native"&&(a="package",d=!0);if(!/^testing|package|production$/.test(a))throw new Error("Invalid environment argument of: '"+a+"',"+" must be either 'testing', 'package', 'production' or 'native'");var e=require("path"),f=process.cwd(),g=this.getModule("fs"),h=e.resolve(f,g.read(".senchasdk").trim()),i=g.readJson(e.join(f,"app.json")),j=i.js||[],k=i.css||[],l=i.extras,m=i.appCache,n=Ext.require("Command.Preprocessor").getInstance(),o=require("fs"),p,q,r,s,t,u,v,w,x,y,z;n.setParams(i.buildOptions||{}),b||(b=i.buildPaths[a]),c||(c=i.archivePath),b=e.resolve(b),c=e.resolve(c),u=e.join(b,"app.js"),this.info("Deploying your application to "+b),g.mkdir(b),j=j.map(function(a){return typeof a=="string"&&(a={path:a}),a.type="js",a}),k=k.map(function(a){return typeof a=="string"&&(a={path:a}),a.type="css",a}),q=j.concat(k).filter(function(b){return!b.shared||a!="production"}),q.forEach(function(a){r=a.path,g.copyFile(e.join(f,r),e.join(b,r)),this.info("Copied "+r)},this),l.forEach(function(a){g.copy(e.join(f,a),e.join(b,a)),this.info("Copied "+a)},this),z=function(c){var d=JSON.stringify({id:i.id,js:j,css:k});g.write(e.join(b,"app.json"),d),this.info("Generated app.json"),p=g.read(e.join(f,"index.html")),a=="production"&&m&&(p=p.replace('<html manifest=""','<html manifest="cache.manifest"')),g.minify(e.join(h,"microloader",(a=="production"?"production":"testing")+".js"),null,"closurecompiler",function(f){p=p.replace(/<script id="microloader"([^<]+)<\/script>/,'<script type="text/javascript">'+f+";Ext.blink("+(a=="production"?JSON.stringify({id:i.id}):d)+")"+"</script>"),g.write(e.join(b,"index.html"),p),this.info("Embedded microloader into index.html"),c&&c()}.bind(this))}.bind(this),this.info("Resolving your application dependencies..."),this.resolve(e.join(f,"index.html"),null,function(h){this.info("Found "+h.length+" dependencies. Concatenating all into app.js..."),t=h.map(function(a){return e.join(f,a.path)}),t.push(u),g.concat(t,e.join(b,"app.all.js"),"\n"),o.unlinkSync(u),o.renameSync(e.join(b,"app.all.js"),u),w=0,v=q.length,q.forEach(function(h){r=h.path,s=e.join(b,r),h.type=="js"&&(g.write(s,n.process(s)),this.info("Processed "+r));if(a=="testing")return;this.info("Minifying "+r),g.minify(s,s,null,function(h,j,k){this.info("Minified "+j);if(a=="production"){var l=g.checksum(h);k.version=l,g.prependFile(h,"/*"+l+"*/"),g.copyFile(h,e.join(c,j,l)),k.update==="delta"&&o.readdirSync(e.join(c,j)).forEach(function(a){if(a===l)return;var d=e.join(b,"deltas",j,a+".json");g.write(d,""),g.delta(e.join(c,j,a),h,d,function(){this.info("Generated delta for: '"+j+"' from hash: '"+a+"' to hash: '"+l+"'")}.bind(this))},this)}++w==v&&z(function(){a=="production"&&m&&(m.cache=m.cache.map(function(a){var c="";return/^(\/|(.*):\/\/)/.test(a)||(this.info("Generating checksum for appCache item: "+a),c=g.checksum(e.join(b,a))),{uri:a,checksum:c}},this),g.write(e.join(b,"cache.manifest"),this.getTemplate("cache.manifest").apply(m)),this.info("Generated cache.manifest")),d&&(y=g.read(e.join(f,"packager.json")),x=Ext.JSON.decode(y),x.platform.match(/iOS/)&&(g.copyDirectory(e.join(f,"resources","icons"),b),g.copyDirectory(e.join(f,"resources","loading"),b)),x.inputPath=b,x.outputPath=e.resolve(i.buildPaths.native),g.mkdir(x.outputPath),g.writeJson(e.join(f,"packager.temp.json"),x),this.info("Packaging your application as a native app..."),this.getModule("package").run("packager.temp.json",function(){o.unlinkSync(e.join(f,"packager.temp.json"))}))}.bind(this))}.bind(this,s,r,h))},this),a=="testing"&&z()}.bind(this))}});