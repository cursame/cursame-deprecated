/**
 * @class Command.module.Manifest
 * @author Jacky Nguyen <jacky@sencha.com>
 */
Ext.define("Command.module.Manifest",{extend:"Command.module.Abstract",description:"Extract class metadata",actions:{create:["Generate a list of metadata for all classes found in the given directories",["path","p","The directory path(s) that contains all classes","array",null,"/path/to/src,/path/to/another/src"],["output","o","The file path to write the results to in JSON format.","string",null,"metadata.json"]]},compareAst:function(a,b){var c,d,e,f;for(c=0,d=b.length;c<d;c++){e=b[c],f=a[c];if(Ext.isArray(e)){if(!this.compareAst(f,e))return!1}else if(e!==undefined&&e!==f)return!1}return!0},walkAst:function(a,b,c,d){var e,f,g;!c&&!d&&(d=[]);for(e=0,f=a.length;e<f;e++){g=a[e];if(Ext.isArray(g)){if(this.compareAst(g,b)){if(!!c)return g;d.push(g)}if(!!c)return this.walkAst(g,b,c,d);this.walkAst(g,b,c,d)}}return d||null},create:function(paths,output){var uglifyjs=require("uglify-js"),findit=require("findit"),fsModule=this.getModule("fs"),fileNameMatcher=/\.js$/,parser=uglifyjs.parser,assembler=uglifyjs.uglify,properties={extend:!0,singleton:!0,requires:!0,alias:!0,mixins:!0,alternateClassName:!0},defineMatcher=["stat",["call",["dot",["name","Ext"],"define"],[["string",undefined],["object"]]]],results=[],ast,files,match,body,metadata;return paths.forEach(function(path){files=findit.sync(path),files.forEach(function(file){if(fileNameMatcher.test(file)){try{ast=parser.parse(fsModule.read(file))}catch(e){throw new Error(require("util").format("Failed parsing file: %s\nReason: %s\nLine: %s\nColumn: %s",file,e.message,e.line,e.col))}match=this.walkAst(ast,defineMatcher,!0),match&&(metadata={},metadata.name=match[1][2][0][1],body=match[1][2][1][1],body.forEach(function(property){properties.hasOwnProperty(property[0])&&(metadata[property[0]]=eval("("+assembler.gen_code(property[1])+")"))}),results.push(metadata))}},this)},this),output&&fsModule.write(output,JSON.stringify(results,null,4)),output}});